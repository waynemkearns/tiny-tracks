{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Baby Wellness Tracker\n\n## Overview\n\nThis is a full-stack baby wellness tracking application designed to help parents monitor their baby's daily activities including feeding, diaper changes, sleep patterns, health records, and growth milestones. The application provides a mobile-first experience with a clean, intuitive interface optimized for quick data entry during busy parenting moments.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS with shadcn/ui component library (New York variant)\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Build Tool**: Vite for fast development and optimized builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Session Management**: Built-in session handling with connect-pg-simple\n\n### Mobile-First Design\n- Responsive design optimized for mobile devices\n- Bottom navigation for easy thumb navigation\n- Touch-friendly interface elements\n- PWA-ready structure for native app-like experience\n\n## Key Components\n\n### Data Models\n- **Babies**: Core entity with name, birth date, and gender\n- **Feeds**: Bottle/breastfeeding tracking with amounts, duration, and timestamps\n- **Nappies**: Diaper change logging (wet/soiled/both)\n- **Sleep Sessions**: Sleep tracking with start/end times and sleep type\n- **Health Records**: Temperature, mood, symptoms, and medication tracking\n- **Growth Records**: Weight, height, and head circumference measurements\n- **Vaccinations**: Immunization tracking with dates and types\n\n### User Interface Components\n- **Quick Entry Modal**: Fast data input for common activities\n- **Activity Feed**: Chronological view of recent baby activities\n- **Stats Overview**: Daily summary cards with key metrics\n- **Chart Preview**: Visual patterns and trends over time\n- **Bottom Navigation**: Mobile-optimized navigation between sections\n\n### API Structure\nRESTful API endpoints organized by resource:\n- `/api/babies` - Baby management\n- `/api/babies/:id/feeds` - Feeding records\n- `/api/babies/:id/nappies` - Diaper tracking\n- `/api/babies/:id/sleep` - Sleep session management\n- `/api/babies/:id/health` - Health record tracking\n- `/api/babies/:id/growth` - Growth measurement tracking\n\n## Data Flow\n\n1. **User Input**: Parents enter data through the quick entry modal or dedicated forms\n2. **Client Validation**: Zod schemas validate data on the client side\n3. **API Request**: TanStack Query manages API calls with optimistic updates\n4. **Server Processing**: Express routes validate and process requests\n5. **Database Storage**: Drizzle ORM handles type-safe database operations\n6. **Cache Invalidation**: Query client automatically updates UI with fresh data\n7. **Real-time Updates**: Activity feeds and stats update immediately\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL driver\n- **drizzle-orm**: Type-safe ORM for database operations\n- **@tanstack/react-query**: Server state management\n- **wouter**: Lightweight React router\n- **date-fns**: Date manipulation and formatting\n- **react-hook-form**: Form state management\n- **zod**: Schema validation\n\n### UI Dependencies\n- **@radix-ui**: Accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Variant-based styling\n- **lucide-react**: Modern icon library\n\n### Development Dependencies\n- **vite**: Fast build tool and dev server\n- **typescript**: Static type checking\n- **drizzle-kit**: Database migration toolkit\n\n## Deployment Strategy\n\n### Development\n- Vite dev server with HMR for frontend development\n- Express server with TypeScript compilation via tsx\n- Automatic database schema synchronization\n\n### Production Build\n1. Frontend build via Vite (outputs to `dist/public`)\n2. Backend compilation via esbuild (outputs to `dist/index.js`)\n3. Database migrations via Drizzle Kit\n4. Static file serving through Express\n\n### Environment Requirements\n- `DATABASE_URL`: PostgreSQL connection string (Neon Database)\n- Node.js 18+ for ES modules support\n- PostgreSQL database with proper schema\n\n### Scalability Considerations\n- Stateless server design for horizontal scaling\n- Database connection pooling via Neon\n- Optimistic updates reduce server load\n- Efficient query patterns with proper indexing\n\n## Changelog\n\n```\nChangelog:\n- July 08, 2025. Initial setup\n- July 09, 2025. Successfully deployed MVP with core features\n```\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\nDesign philosophy: Simplicity-first UX at all times (not just night mode)\nCore features: Feed and Change tracking must be always accessible with minimal taps\nProduct name: TinyTracks\nComparison features: Free tier (WHO standards), Premium tier (peer comparisons)\n```","size_bytes":5156},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertBabySchema, insertFeedSchema, insertNappySchema, insertSleepSessionSchema,\n  insertHealthRecordSchema, insertGrowthRecordSchema, insertVaccinationSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Baby routes\n  app.get(\"/api/babies\", async (req, res) => {\n    try {\n      const babies = await storage.getBabies();\n      res.json(babies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch babies\" });\n    }\n  });\n\n  app.get(\"/api/babies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const baby = await storage.getBaby(id);\n      if (!baby) {\n        return res.status(404).json({ message: \"Baby not found\" });\n      }\n      res.json(baby);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch baby\" });\n    }\n  });\n\n  app.post(\"/api/babies\", async (req, res) => {\n    try {\n      const babyData = insertBabySchema.parse(req.body);\n      const baby = await storage.createBaby(babyData);\n      res.status(201).json(baby);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid baby data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create baby\" });\n    }\n  });\n\n  app.put(\"/api/babies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const babyData = insertBabySchema.partial().parse(req.body);\n      const baby = await storage.updateBaby(id, babyData);\n      if (!baby) {\n        return res.status(404).json({ message: \"Baby not found\" });\n      }\n      res.json(baby);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid baby data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update baby\" });\n    }\n  });\n\n  // Feed routes\n  app.get(\"/api/babies/:babyId/feeds\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const feeds = await storage.getFeeds(babyId, limit);\n      res.json(feeds);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch feeds\" });\n    }\n  });\n\n  app.post(\"/api/babies/:babyId/feeds\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const feedData = insertFeedSchema.parse({ ...req.body, babyId });\n      const feed = await storage.createFeed(feedData);\n      res.status(201).json(feed);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid feed data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create feed\" });\n    }\n  });\n\n  app.put(\"/api/feeds/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const feedData = insertFeedSchema.partial().parse(req.body);\n      const feed = await storage.updateFeed(id, feedData);\n      if (!feed) {\n        return res.status(404).json({ message: \"Feed not found\" });\n      }\n      res.json(feed);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid feed data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update feed\" });\n    }\n  });\n\n  app.delete(\"/api/feeds/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteFeed(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Feed not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete feed\" });\n    }\n  });\n\n  // Nappy routes\n  app.get(\"/api/babies/:babyId/nappies\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const nappies = await storage.getNappies(babyId, limit);\n      res.json(nappies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch nappies\" });\n    }\n  });\n\n  app.post(\"/api/babies/:babyId/nappies\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const nappyData = insertNappySchema.parse({ ...req.body, babyId });\n      const nappy = await storage.createNappy(nappyData);\n      res.status(201).json(nappy);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid nappy data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create nappy\" });\n    }\n  });\n\n  app.put(\"/api/nappies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const nappyData = insertNappySchema.partial().parse(req.body);\n      const nappy = await storage.updateNappy(id, nappyData);\n      if (!nappy) {\n        return res.status(404).json({ message: \"Nappy not found\" });\n      }\n      res.json(nappy);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid nappy data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update nappy\" });\n    }\n  });\n\n  app.delete(\"/api/nappies/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteNappy(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Nappy not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete nappy\" });\n    }\n  });\n\n  // Sleep routes\n  app.get(\"/api/babies/:babyId/sleep\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const sleepSessions = await storage.getSleepSessions(babyId, limit);\n      res.json(sleepSessions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sleep sessions\" });\n    }\n  });\n\n  app.get(\"/api/babies/:babyId/sleep/active\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const activeSleep = await storage.getActiveSleepSession(babyId);\n      res.json(activeSleep || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active sleep session\" });\n    }\n  });\n\n  app.post(\"/api/babies/:babyId/sleep\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const sleepData = insertSleepSessionSchema.parse({ ...req.body, babyId });\n      const sleepSession = await storage.createSleepSession(sleepData);\n      res.status(201).json(sleepSession);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid sleep data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sleep session\" });\n    }\n  });\n\n  app.put(\"/api/sleep/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const sleepData = insertSleepSessionSchema.partial().parse(req.body);\n      \n      // Calculate duration if endTime is provided\n      if (sleepData.endTime && sleepData.startTime) {\n        const start = new Date(sleepData.startTime);\n        const end = new Date(sleepData.endTime);\n        sleepData.duration = Math.round((end.getTime() - start.getTime()) / (1000 * 60));\n      }\n      \n      const sleepSession = await storage.updateSleepSession(id, sleepData);\n      if (!sleepSession) {\n        return res.status(404).json({ message: \"Sleep session not found\" });\n      }\n      res.json(sleepSession);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid sleep data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update sleep session\" });\n    }\n  });\n\n  app.delete(\"/api/sleep/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteSleepSession(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Sleep session not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete sleep session\" });\n    }\n  });\n\n  // Health routes\n  app.get(\"/api/babies/:babyId/health\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const healthRecords = await storage.getHealthRecords(babyId, limit);\n      res.json(healthRecords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch health records\" });\n    }\n  });\n\n  app.post(\"/api/babies/:babyId/health\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const healthData = insertHealthRecordSchema.parse({ ...req.body, babyId });\n      const healthRecord = await storage.createHealthRecord(healthData);\n      res.status(201).json(healthRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid health data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create health record\" });\n    }\n  });\n\n  app.put(\"/api/health/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const healthData = insertHealthRecordSchema.partial().parse(req.body);\n      const healthRecord = await storage.updateHealthRecord(id, healthData);\n      if (!healthRecord) {\n        return res.status(404).json({ message: \"Health record not found\" });\n      }\n      res.json(healthRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid health data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update health record\" });\n    }\n  });\n\n  app.delete(\"/api/health/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteHealthRecord(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Health record not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete health record\" });\n    }\n  });\n\n  // Growth routes\n  app.get(\"/api/babies/:babyId/growth\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const growthRecords = await storage.getGrowthRecords(babyId);\n      res.json(growthRecords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch growth records\" });\n    }\n  });\n\n  app.post(\"/api/babies/:babyId/growth\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const growthData = insertGrowthRecordSchema.parse({ ...req.body, babyId });\n      const growthRecord = await storage.createGrowthRecord(growthData);\n      res.status(201).json(growthRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid growth data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create growth record\" });\n    }\n  });\n\n  // Vaccination routes\n  app.get(\"/api/babies/:babyId/vaccinations\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const vaccinations = await storage.getVaccinations(babyId);\n      res.json(vaccinations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vaccinations\" });\n    }\n  });\n\n  app.post(\"/api/babies/:babyId/vaccinations\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const vaccinationData = insertVaccinationSchema.parse({ ...req.body, babyId });\n      const vaccination = await storage.createVaccination(vaccinationData);\n      res.status(201).json(vaccination);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid vaccination data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create vaccination\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/babies/:babyId/summary/:date\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const date = new Date(req.params.date);\n      const summary = await storage.getDailySummary(babyId, date);\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily summary\" });\n    }\n  });\n\n  app.get(\"/api/babies/:babyId/stats/weekly/:startDate\", async (req, res) => {\n    try {\n      const babyId = parseInt(req.params.babyId);\n      const startDate = new Date(req.params.startDate);\n      const stats = await storage.getWeeklyStats(babyId, startDate);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch weekly stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13476},"server/storage.ts":{"content":"import { \n  babies, feeds, nappies, sleepSessions, healthRecords, growthRecords, vaccinations, users,\n  type Baby, type InsertBaby, type Feed, type InsertFeed, type Nappy, type InsertNappy,\n  type SleepSession, type InsertSleepSession, type HealthRecord, type InsertHealthRecord,\n  type GrowthRecord, type InsertGrowthRecord, type Vaccination, type InsertVaccination,\n  type User, type InsertUser\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Baby methods\n  getBaby(id: number): Promise<Baby | undefined>;\n  createBaby(baby: InsertBaby): Promise<Baby>;\n  updateBaby(id: number, baby: Partial<InsertBaby>): Promise<Baby | undefined>;\n  getBabies(): Promise<Baby[]>;\n\n  // Feed methods\n  createFeed(feed: InsertFeed): Promise<Feed>;\n  getFeeds(babyId: number, limit?: number): Promise<Feed[]>;\n  getFeedsByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<Feed[]>;\n  updateFeed(id: number, feed: Partial<InsertFeed>): Promise<Feed | undefined>;\n  deleteFeed(id: number): Promise<boolean>;\n\n  // Nappy methods\n  createNappy(nappy: InsertNappy): Promise<Nappy>;\n  getNappies(babyId: number, limit?: number): Promise<Nappy[]>;\n  getNappiesByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<Nappy[]>;\n  updateNappy(id: number, nappy: Partial<InsertNappy>): Promise<Nappy | undefined>;\n  deleteNappy(id: number): Promise<boolean>;\n\n  // Sleep methods\n  createSleepSession(sleepSession: InsertSleepSession): Promise<SleepSession>;\n  getSleepSessions(babyId: number, limit?: number): Promise<SleepSession[]>;\n  getSleepSessionsByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<SleepSession[]>;\n  updateSleepSession(id: number, sleepSession: Partial<InsertSleepSession>): Promise<SleepSession | undefined>;\n  deleteSleepSession(id: number): Promise<boolean>;\n  getActiveSleepSession(babyId: number): Promise<SleepSession | undefined>;\n\n  // Health methods\n  createHealthRecord(healthRecord: InsertHealthRecord): Promise<HealthRecord>;\n  getHealthRecords(babyId: number, limit?: number): Promise<HealthRecord[]>;\n  getHealthRecordsByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<HealthRecord[]>;\n  updateHealthRecord(id: number, healthRecord: Partial<InsertHealthRecord>): Promise<HealthRecord | undefined>;\n  deleteHealthRecord(id: number): Promise<boolean>;\n\n  // Growth methods\n  createGrowthRecord(growthRecord: InsertGrowthRecord): Promise<GrowthRecord>;\n  getGrowthRecords(babyId: number): Promise<GrowthRecord[]>;\n  updateGrowthRecord(id: number, growthRecord: Partial<InsertGrowthRecord>): Promise<GrowthRecord | undefined>;\n  deleteGrowthRecord(id: number): Promise<boolean>;\n\n  // Vaccination methods\n  createVaccination(vaccination: InsertVaccination): Promise<Vaccination>;\n  getVaccinations(babyId: number): Promise<Vaccination[]>;\n  updateVaccination(id: number, vaccination: Partial<InsertVaccination>): Promise<Vaccination | undefined>;\n  deleteVaccination(id: number): Promise<boolean>;\n\n  // Analytics methods\n  getDailySummary(babyId: number, date: Date): Promise<{\n    feedCount: number;\n    nappyCount: number;\n    sleepDuration: number;\n    lastFeed?: Date;\n    lastNappy?: Date;\n    currentSleepSession?: SleepSession;\n  }>;\n  getWeeklyStats(babyId: number, startDate: Date): Promise<{\n    daily: Array<{\n      date: string;\n      feedCount: number;\n      nappyCount: number;\n      sleepDuration: number;\n    }>;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Baby methods\n  async getBaby(id: number): Promise<Baby | undefined> {\n    const [baby] = await db.select().from(babies).where(eq(babies.id, id));\n    return baby || undefined;\n  }\n\n  async createBaby(baby: InsertBaby): Promise<Baby> {\n    const [newBaby] = await db.insert(babies).values(baby).returning();\n    return newBaby;\n  }\n\n  async updateBaby(id: number, baby: Partial<InsertBaby>): Promise<Baby | undefined> {\n    const [updatedBaby] = await db.update(babies)\n      .set(baby)\n      .where(eq(babies.id, id))\n      .returning();\n    return updatedBaby || undefined;\n  }\n\n  async getBabies(): Promise<Baby[]> {\n    return await db.select().from(babies).orderBy(desc(babies.createdAt));\n  }\n\n  // Feed methods\n  async createFeed(feed: InsertFeed): Promise<Feed> {\n    const [newFeed] = await db.insert(feeds).values(feed).returning();\n    return newFeed;\n  }\n\n  async getFeeds(babyId: number, limit = 50): Promise<Feed[]> {\n    return await db.select().from(feeds)\n      .where(eq(feeds.babyId, babyId))\n      .orderBy(desc(feeds.timestamp))\n      .limit(limit);\n  }\n\n  async getFeedsByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<Feed[]> {\n    return await db.select().from(feeds)\n      .where(\n        and(\n          eq(feeds.babyId, babyId),\n          gte(feeds.timestamp, startDate),\n          lte(feeds.timestamp, endDate)\n        )\n      )\n      .orderBy(desc(feeds.timestamp));\n  }\n\n  async updateFeed(id: number, feed: Partial<InsertFeed>): Promise<Feed | undefined> {\n    const [updatedFeed] = await db.update(feeds)\n      .set(feed)\n      .where(eq(feeds.id, id))\n      .returning();\n    return updatedFeed || undefined;\n  }\n\n  async deleteFeed(id: number): Promise<boolean> {\n    const result = await db.delete(feeds).where(eq(feeds.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Nappy methods\n  async createNappy(nappy: InsertNappy): Promise<Nappy> {\n    const [newNappy] = await db.insert(nappies).values(nappy).returning();\n    return newNappy;\n  }\n\n  async getNappies(babyId: number, limit = 50): Promise<Nappy[]> {\n    return await db.select().from(nappies)\n      .where(eq(nappies.babyId, babyId))\n      .orderBy(desc(nappies.timestamp))\n      .limit(limit);\n  }\n\n  async getNappiesByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<Nappy[]> {\n    return await db.select().from(nappies)\n      .where(\n        and(\n          eq(nappies.babyId, babyId),\n          gte(nappies.timestamp, startDate),\n          lte(nappies.timestamp, endDate)\n        )\n      )\n      .orderBy(desc(nappies.timestamp));\n  }\n\n  async updateNappy(id: number, nappy: Partial<InsertNappy>): Promise<Nappy | undefined> {\n    const [updatedNappy] = await db.update(nappies)\n      .set(nappy)\n      .where(eq(nappies.id, id))\n      .returning();\n    return updatedNappy || undefined;\n  }\n\n  async deleteNappy(id: number): Promise<boolean> {\n    const result = await db.delete(nappies).where(eq(nappies.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Sleep methods\n  async createSleepSession(sleepSession: InsertSleepSession): Promise<SleepSession> {\n    const [newSleepSession] = await db.insert(sleepSessions).values(sleepSession).returning();\n    return newSleepSession;\n  }\n\n  async getSleepSessions(babyId: number, limit = 50): Promise<SleepSession[]> {\n    return await db.select().from(sleepSessions)\n      .where(eq(sleepSessions.babyId, babyId))\n      .orderBy(desc(sleepSessions.startTime))\n      .limit(limit);\n  }\n\n  async getSleepSessionsByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<SleepSession[]> {\n    return await db.select().from(sleepSessions)\n      .where(\n        and(\n          eq(sleepSessions.babyId, babyId),\n          gte(sleepSessions.startTime, startDate),\n          lte(sleepSessions.startTime, endDate)\n        )\n      )\n      .orderBy(desc(sleepSessions.startTime));\n  }\n\n  async updateSleepSession(id: number, sleepSession: Partial<InsertSleepSession>): Promise<SleepSession | undefined> {\n    const [updatedSleepSession] = await db.update(sleepSessions)\n      .set(sleepSession)\n      .where(eq(sleepSessions.id, id))\n      .returning();\n    return updatedSleepSession || undefined;\n  }\n\n  async deleteSleepSession(id: number): Promise<boolean> {\n    const result = await db.delete(sleepSessions).where(eq(sleepSessions.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getActiveSleepSession(babyId: number): Promise<SleepSession | undefined> {\n    const [activeSleep] = await db.select().from(sleepSessions)\n      .where(\n        and(\n          eq(sleepSessions.babyId, babyId),\n          sql`${sleepSessions.endTime} IS NULL`\n        )\n      )\n      .orderBy(desc(sleepSessions.startTime))\n      .limit(1);\n    return activeSleep || undefined;\n  }\n\n  // Health methods\n  async createHealthRecord(healthRecord: InsertHealthRecord): Promise<HealthRecord> {\n    const [newHealthRecord] = await db.insert(healthRecords).values(healthRecord).returning();\n    return newHealthRecord;\n  }\n\n  async getHealthRecords(babyId: number, limit = 50): Promise<HealthRecord[]> {\n    return await db.select().from(healthRecords)\n      .where(eq(healthRecords.babyId, babyId))\n      .orderBy(desc(healthRecords.timestamp))\n      .limit(limit);\n  }\n\n  async getHealthRecordsByDateRange(babyId: number, startDate: Date, endDate: Date): Promise<HealthRecord[]> {\n    return await db.select().from(healthRecords)\n      .where(\n        and(\n          eq(healthRecords.babyId, babyId),\n          gte(healthRecords.timestamp, startDate),\n          lte(healthRecords.timestamp, endDate)\n        )\n      )\n      .orderBy(desc(healthRecords.timestamp));\n  }\n\n  async updateHealthRecord(id: number, healthRecord: Partial<InsertHealthRecord>): Promise<HealthRecord | undefined> {\n    const [updatedHealthRecord] = await db.update(healthRecords)\n      .set(healthRecord)\n      .where(eq(healthRecords.id, id))\n      .returning();\n    return updatedHealthRecord || undefined;\n  }\n\n  async deleteHealthRecord(id: number): Promise<boolean> {\n    const result = await db.delete(healthRecords).where(eq(healthRecords.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Growth methods\n  async createGrowthRecord(growthRecord: InsertGrowthRecord): Promise<GrowthRecord> {\n    const [newGrowthRecord] = await db.insert(growthRecords).values(growthRecord).returning();\n    return newGrowthRecord;\n  }\n\n  async getGrowthRecords(babyId: number): Promise<GrowthRecord[]> {\n    return await db.select().from(growthRecords)\n      .where(eq(growthRecords.babyId, babyId))\n      .orderBy(desc(growthRecords.timestamp));\n  }\n\n  async updateGrowthRecord(id: number, growthRecord: Partial<InsertGrowthRecord>): Promise<GrowthRecord | undefined> {\n    const [updatedGrowthRecord] = await db.update(growthRecords)\n      .set(growthRecord)\n      .where(eq(growthRecords.id, id))\n      .returning();\n    return updatedGrowthRecord || undefined;\n  }\n\n  async deleteGrowthRecord(id: number): Promise<boolean> {\n    const result = await db.delete(growthRecords).where(eq(growthRecords.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Vaccination methods\n  async createVaccination(vaccination: InsertVaccination): Promise<Vaccination> {\n    const [newVaccination] = await db.insert(vaccinations).values(vaccination).returning();\n    return newVaccination;\n  }\n\n  async getVaccinations(babyId: number): Promise<Vaccination[]> {\n    return await db.select().from(vaccinations)\n      .where(eq(vaccinations.babyId, babyId))\n      .orderBy(desc(vaccinations.dateGiven));\n  }\n\n  async updateVaccination(id: number, vaccination: Partial<InsertVaccination>): Promise<Vaccination | undefined> {\n    const [updatedVaccination] = await db.update(vaccinations)\n      .set(vaccination)\n      .where(eq(vaccinations.id, id))\n      .returning();\n    return updatedVaccination || undefined;\n  }\n\n  async deleteVaccination(id: number): Promise<boolean> {\n    const result = await db.delete(vaccinations).where(eq(vaccinations.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Analytics methods\n  async getDailySummary(babyId: number, date: Date): Promise<{\n    feedCount: number;\n    nappyCount: number;\n    sleepDuration: number;\n    lastFeed?: Date;\n    lastNappy?: Date;\n    currentSleepSession?: SleepSession;\n  }> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [feedsToday, nappiesShooday, sleepSessionsToday, activeSleep, lastFeed, lastNappy] = await Promise.all([\n      this.getFeedsByDateRange(babyId, startOfDay, endOfDay),\n      this.getNappiesByDateRange(babyId, startOfDay, endOfDay),\n      this.getSleepSessionsByDateRange(babyId, startOfDay, endOfDay),\n      this.getActiveSleepSession(babyId),\n      this.getFeeds(babyId, 1),\n      this.getNappies(babyId, 1)\n    ]);\n\n    const sleepDuration = sleepSessionsToday.reduce((total, session) => {\n      if (session.duration) {\n        return total + session.duration;\n      }\n      return total;\n    }, 0);\n\n    return {\n      feedCount: feedsToday.length,\n      nappyCount: nappiesShooday.length,\n      sleepDuration,\n      lastFeed: lastFeed[0]?.timestamp,\n      lastNappy: lastNappy[0]?.timestamp,\n      currentSleepSession: activeSleep,\n    };\n  }\n\n  async getWeeklyStats(babyId: number, startDate: Date): Promise<{\n    daily: Array<{\n      date: string;\n      feedCount: number;\n      nappyCount: number;\n      sleepDuration: number;\n    }>;\n  }> {\n    const daily = [];\n    \n    for (let i = 0; i < 7; i++) {\n      const currentDate = new Date(startDate);\n      currentDate.setDate(startDate.getDate() + i);\n      \n      const summary = await this.getDailySummary(babyId, currentDate);\n      daily.push({\n        date: currentDate.toISOString().split('T')[0],\n        feedCount: summary.feedCount,\n        nappyCount: summary.nappyCount,\n        sleepDuration: summary.sleepDuration,\n      });\n    }\n\n    return { daily };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14436},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const babies = pgTable(\"babies\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  birthDate: timestamp(\"birth_date\").notNull(),\n  gender: text(\"gender\"), // \"male\", \"female\", \"other\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const feeds = pgTable(\"feeds\", {\n  id: serial(\"id\").primaryKey(),\n  babyId: integer(\"baby_id\").notNull().references(() => babies.id),\n  type: text(\"type\").notNull(), // \"bottle\", \"breast_left\", \"breast_right\", \"breast_both\"\n  amount: decimal(\"amount\"), // in ml for bottles\n  duration: integer(\"duration\"), // in minutes for breastfeeding\n  timestamp: timestamp(\"timestamp\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const nappies = pgTable(\"nappies\", {\n  id: serial(\"id\").primaryKey(),\n  babyId: integer(\"baby_id\").notNull().references(() => babies.id),\n  type: text(\"type\").notNull(), // \"wet\", \"soiled\", \"both\"\n  timestamp: timestamp(\"timestamp\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sleepSessions = pgTable(\"sleep_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  babyId: integer(\"baby_id\").notNull().references(() => babies.id),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration\"), // in minutes, calculated when endTime is set\n  type: text(\"type\").notNull(), // \"nap\", \"night\"\n  location: text(\"location\"), // \"crib\", \"bed\", \"stroller\", etc.\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const healthRecords = pgTable(\"health_records\", {\n  id: serial(\"id\").primaryKey(),\n  babyId: integer(\"baby_id\").notNull().references(() => babies.id),\n  type: text(\"type\").notNull(), // \"temperature\", \"rash\", \"mood\", \"illness\", \"medication\"\n  value: text(\"value\"), // temperature value, mood description, etc.\n  details: jsonb(\"details\"), // flexible field for various health data\n  timestamp: timestamp(\"timestamp\").notNull(),\n  photos: text(\"photos\").array(), // array of photo URLs\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const growthRecords = pgTable(\"growth_records\", {\n  id: serial(\"id\").primaryKey(),\n  babyId: integer(\"baby_id\").notNull().references(() => babies.id),\n  weight: decimal(\"weight\"), // in kg\n  height: decimal(\"height\"), // in cm\n  headCircumference: decimal(\"head_circumference\"), // in cm\n  timestamp: timestamp(\"timestamp\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const vaccinations = pgTable(\"vaccinations\", {\n  id: serial(\"id\").primaryKey(),\n  babyId: integer(\"baby_id\").notNull().references(() => babies.id),\n  vaccineName: text(\"vaccine_name\").notNull(),\n  dateGiven: timestamp(\"date_given\").notNull(),\n  nextDueDate: timestamp(\"next_due_date\"),\n  location: text(\"location\"), // clinic, hospital, etc.\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const babiesRelations = relations(babies, ({ many }) => ({\n  feeds: many(feeds),\n  nappies: many(nappies),\n  sleepSessions: many(sleepSessions),\n  healthRecords: many(healthRecords),\n  growthRecords: many(growthRecords),\n  vaccinations: many(vaccinations),\n}));\n\nexport const feedsRelations = relations(feeds, ({ one }) => ({\n  baby: one(babies, {\n    fields: [feeds.babyId],\n    references: [babies.id],\n  }),\n}));\n\nexport const nappiesRelations = relations(nappies, ({ one }) => ({\n  baby: one(babies, {\n    fields: [nappies.babyId],\n    references: [babies.id],\n  }),\n}));\n\nexport const sleepSessionsRelations = relations(sleepSessions, ({ one }) => ({\n  baby: one(babies, {\n    fields: [sleepSessions.babyId],\n    references: [babies.id],\n  }),\n}));\n\nexport const healthRecordsRelations = relations(healthRecords, ({ one }) => ({\n  baby: one(babies, {\n    fields: [healthRecords.babyId],\n    references: [babies.id],\n  }),\n}));\n\nexport const growthRecordsRelations = relations(growthRecords, ({ one }) => ({\n  baby: one(babies, {\n    fields: [growthRecords.babyId],\n    references: [babies.id],\n  }),\n}));\n\nexport const vaccinationsRelations = relations(vaccinations, ({ one }) => ({\n  baby: one(babies, {\n    fields: [vaccinations.babyId],\n    references: [babies.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertBabySchema = createInsertSchema(babies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeedSchema = createInsertSchema(feeds).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNappySchema = createInsertSchema(nappies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSleepSessionSchema = createInsertSchema(sleepSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHealthRecordSchema = createInsertSchema(healthRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGrowthRecordSchema = createInsertSchema(growthRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVaccinationSchema = createInsertSchema(vaccinations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Baby = typeof babies.$inferSelect;\nexport type InsertBaby = z.infer<typeof insertBabySchema>;\n\nexport type Feed = typeof feeds.$inferSelect;\nexport type InsertFeed = z.infer<typeof insertFeedSchema>;\n\nexport type Nappy = typeof nappies.$inferSelect;\nexport type InsertNappy = z.infer<typeof insertNappySchema>;\n\nexport type SleepSession = typeof sleepSessions.$inferSelect;\nexport type InsertSleepSession = z.infer<typeof insertSleepSessionSchema>;\n\nexport type HealthRecord = typeof healthRecords.$inferSelect;\nexport type InsertHealthRecord = z.infer<typeof insertHealthRecordSchema>;\n\nexport type GrowthRecord = typeof growthRecords.$inferSelect;\nexport type InsertGrowthRecord = z.infer<typeof insertGrowthRecordSchema>;\n\nexport type Vaccination = typeof vaccinations.$inferSelect;\nexport type InsertVaccination = z.infer<typeof insertVaccinationSchema>;\n\n// Users table (keeping existing)\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":6620},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Charts from \"@/pages/charts\";\nimport Growth from \"@/pages/growth\";\nimport Export from \"@/pages/export\";\nimport Profile from \"@/pages/profile\";\nimport Compare from \"@/pages/compare\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/charts\" component={Charts} />\n      <Route path=\"/growth\" component={Growth} />\n      <Route path=\"/compare\" component={Compare} />\n      <Route path=\"/export\" component={Export} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1142},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 94.1%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.75rem;\n\n  /* Custom app colors matching design reference */\n  --app-blue: hsl(207, 90%, 54%);\n  --app-green: hsl(84, 69%, 47%);\n  --app-yellow: hsl(39, 100%, 57%);\n  --app-orange: hsl(28, 100%, 57%);\n  --app-purple: hsl(270, 60%, 60%);\n  --app-red: hsl(348, 83%, 47%);\n  --app-surface: hsl(0, 0%, 100%);\n  --app-background: hsl(0, 0%, 98%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n\n  /* Custom app colors for dark mode */\n  --app-blue: hsl(207, 90%, 54%);\n  --app-green: hsl(84, 69%, 47%);\n  --app-yellow: hsl(39, 100%, 57%);\n  --app-orange: hsl(28, 100%, 57%);\n  --app-purple: hsl(270, 60%, 60%);\n  --app-red: hsl(348, 83%, 47%);\n  --app-surface: hsl(222.2, 84%, 4.9%);\n  --app-background: hsl(220, 13%, 6%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n\n  html {\n    font-size: 16px;\n  }\n}\n\n@layer components {\n  /* Custom utility classes for the baby app */\n  .card-shadow {\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .floating-fab {\n    box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);\n  }\n\n  /* Feed-specific colors */\n  .feed-card {\n    @apply bg-blue-50 border-blue-200;\n  }\n\n  .feed-icon {\n    @apply text-blue-600 bg-blue-100;\n  }\n\n  .feed-button {\n    @apply bg-blue-500 hover:bg-blue-600 text-white;\n  }\n\n  /* Nappy-specific colors */\n  .nappy-card {\n    @apply bg-yellow-50 border-yellow-200;\n  }\n\n  .nappy-icon {\n    @apply text-yellow-600 bg-yellow-100;\n  }\n\n  .nappy-button {\n    @apply bg-yellow-500 hover:bg-yellow-600 text-white;\n  }\n\n  /* Sleep-specific colors */\n  .sleep-card {\n    @apply bg-purple-50 border-purple-200;\n  }\n\n  .sleep-icon {\n    @apply text-purple-600 bg-purple-100;\n  }\n\n  .sleep-button {\n    @apply bg-purple-500 hover:bg-purple-600 text-white;\n  }\n\n  /* Health-specific colors */\n  .health-card {\n    @apply bg-orange-50 border-orange-200;\n  }\n\n  .health-icon {\n    @apply text-orange-600 bg-orange-100;\n  }\n\n  .health-button {\n    @apply bg-orange-500 hover:bg-orange-600 text-white;\n  }\n\n  /* Mood/General wellness colors */\n  .mood-card {\n    @apply bg-green-50 border-green-200;\n  }\n\n  .mood-icon {\n    @apply text-green-600 bg-green-100;\n  }\n\n  .mood-button {\n    @apply bg-green-500 hover:bg-green-600 text-white;\n  }\n\n  /* Quick entry grid responsive layout */\n  .quick-entry-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 12px;\n  }\n\n  @media (min-width: 480px) {\n    .quick-entry-grid {\n      grid-template-columns: repeat(4, 1fr);\n    }\n  }\n\n  /* Mobile app container styles */\n  .mobile-app-container {\n    @apply max-w-md mx-auto bg-white min-h-screen relative;\n  }\n\n  /* Bottom navigation safe area */\n  .content-with-bottom-nav {\n    @apply pb-20;\n  }\n\n  /* Icon container styles */\n  .icon-container {\n    @apply p-2 rounded-full flex items-center justify-center;\n  }\n\n  /* Stats card styles */\n  .stats-card {\n    @apply p-3 rounded-xl shadow-sm;\n  }\n\n  /* Activity item styles */\n  .activity-item {\n    @apply flex items-center space-x-3 p-3 bg-gray-50 rounded-lg;\n  }\n\n  /* Chart bar styles */\n  .chart-bar {\n    @apply rounded-t transition-all duration-200;\n  }\n\n  /* Modal backdrop */\n  .modal-backdrop {\n    @apply fixed inset-0 bg-black bg-opacity-50 z-50;\n  }\n\n  /* Modal content */\n  .modal-content {\n    @apply fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl max-w-md mx-auto;\n  }\n\n  /* Alert styles */\n  .health-alert {\n    @apply fixed top-16 left-4 right-4 bg-orange-100 border-l-4 border-orange-500 p-4 rounded-lg shadow-lg z-40 max-w-md mx-auto;\n  }\n\n  /* Temperature warning styles */\n  .temp-warning {\n    @apply bg-red-50 border-red-200 text-red-800;\n  }\n\n  .temp-normal {\n    @apply bg-green-50 border-green-200 text-green-800;\n  }\n\n  /* Growth chart styles */\n  .growth-percentile {\n    @apply relative overflow-hidden;\n  }\n\n  /* Vaccination reminder styles */\n  .vaccination-due {\n    @apply bg-yellow-100 border-yellow-300 text-yellow-800;\n  }\n\n  .vaccination-overdue {\n    @apply bg-red-100 border-red-300 text-red-800;\n  }\n\n  /* Export styles */\n  .export-summary {\n    @apply grid grid-cols-2 gap-4 text-sm;\n  }\n\n  /* Form styles */\n  .form-grid {\n    @apply grid grid-cols-1 gap-4;\n  }\n\n  @media (min-width: 640px) {\n    .form-grid {\n      @apply grid-cols-2;\n    }\n  }\n\n  /* Loading skeleton styles */\n  .skeleton {\n    @apply animate-pulse bg-gray-200 rounded;\n  }\n\n  /* Empty state styles */\n  .empty-state {\n    @apply text-center py-8 text-gray-500;\n  }\n\n  /* Success message styles */\n  .success-message {\n    @apply bg-green-50 border-green-200 text-green-800 p-3 rounded-lg;\n  }\n\n  /* Error message styles */\n  .error-message {\n    @apply bg-red-50 border-red-200 text-red-800 p-3 rounded-lg;\n  }\n}\n\n@layer utilities {\n  /* Custom utilities for spacing and sizing */\n  .h-screen-safe {\n    min-height: calc(100vh - env(safe-area-inset-bottom));\n  }\n\n  .pb-safe {\n    padding-bottom: calc(1.25rem + env(safe-area-inset-bottom));\n  }\n\n  /* Touch target sizing for mobile */\n  .touch-target {\n    @apply min-h-[44px] min-w-[44px];\n  }\n\n  /* Text sizing for mobile readability */\n  .text-mobile {\n    font-size: 16px; /* Prevents zoom on iOS */\n  }\n\n  /* Focus styles for accessibility */\n  .focus-visible {\n    @apply outline-none ring-2 ring-primary ring-offset-2;\n  }\n\n  /* Scroll area styles */\n  .scroll-area {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--muted-foreground)) transparent;\n  }\n\n  .scroll-area::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .scroll-area::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scroll-area::-webkit-scrollbar-thumb {\n    background-color: hsl(var(--muted-foreground));\n    border-radius: 3px;\n  }\n\n  /* Animation utilities */\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .animate-bounce-in {\n    animation: bounceIn 0.4s ease-out;\n  }\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    transform: scale(0.8);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.8;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n/* Print styles for export functionality */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n\n  .print-only {\n    display: block !important;\n  }\n\n  body {\n    font-size: 12px;\n    line-height: 1.4;\n  }\n\n  .page-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":9746},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/activity-feed.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Utensils, Baby, Moon, Edit } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Feed, Nappy, SleepSession } from \"@shared/schema\";\n\ninterface ActivityFeedProps {\n  babyId: number;\n}\n\ntype ActivityItem = {\n  id: number;\n  type: 'feed' | 'nappy' | 'sleep';\n  timestamp: string;\n  data: Feed | Nappy | SleepSession;\n};\n\nexport default function ActivityFeed({ babyId }: ActivityFeedProps) {\n  const { data: feeds = [] } = useQuery({\n    queryKey: [`/api/babies/${babyId}/feeds`],\n    select: (data: Feed[]) => data.slice(0, 5),\n  });\n\n  const { data: nappies = [] } = useQuery({\n    queryKey: [`/api/babies/${babyId}/nappies`],\n    select: (data: Nappy[]) => data.slice(0, 5),\n  });\n\n  const { data: sleepSessions = [] } = useQuery({\n    queryKey: [`/api/babies/${babyId}/sleep`],\n    select: (data: SleepSession[]) => data.slice(0, 5),\n  });\n\n  // Combine and sort all activities\n  const activities: ActivityItem[] = [\n    ...feeds.map(feed => ({\n      id: feed.id,\n      type: 'feed' as const,\n      timestamp: feed.timestamp,\n      data: feed,\n    })),\n    ...nappies.map(nappy => ({\n      id: nappy.id,\n      type: 'nappy' as const,\n      timestamp: nappy.timestamp,\n      data: nappy,\n    })),\n    ...sleepSessions.map(sleep => ({\n      id: sleep.id,\n      type: 'sleep' as const,\n      timestamp: sleep.startTime,\n      data: sleep,\n    })),\n  ]\n    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n    .slice(0, 10);\n\n  const renderActivityItem = (activity: ActivityItem) => {\n    const time = format(new Date(activity.timestamp), \"h:mm a\");\n    \n    switch (activity.type) {\n      case 'feed': {\n        const feed = activity.data as Feed;\n        return (\n          <div key={`feed-${activity.id}`} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"bg-blue-100 p-2 rounded-full\">\n              <Utensils className=\"h-4 w-4 text-blue-600\" />\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"font-medium\">{feed.type === 'bottle' ? 'Bottle Feed' : 'Breast Feed'}</p>\n              <p className=\"text-sm text-gray-600\">\n                {feed.amount ? `${feed.amount}ml` : `${feed.duration || 0} min`} • {time}\n              </p>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400\">\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        );\n      }\n      \n      case 'nappy': {\n        const nappy = activity.data as Nappy;\n        return (\n          <div key={`nappy-${activity.id}`} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"bg-yellow-100 p-2 rounded-full\">\n              <Baby className=\"h-4 w-4 text-yellow-600\" />\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"font-medium\">{nappy.type.charAt(0).toUpperCase() + nappy.type.slice(1)} Nappy</p>\n              <p className=\"text-sm text-gray-600\">{time}</p>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400\">\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        );\n      }\n      \n      case 'sleep': {\n        const sleep = activity.data as SleepSession;\n        const duration = sleep.duration ? Math.round(sleep.duration) : 0;\n        const hours = Math.floor(duration / 60);\n        const minutes = duration % 60;\n        const durationText = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;\n        \n        return (\n          <div key={`sleep-${activity.id}`} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"bg-purple-100 p-2 rounded-full\">\n              <Moon className=\"h-4 w-4 text-purple-600\" />\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"font-medium\">{sleep.type === 'nap' ? 'Nap' : 'Night Sleep'}</p>\n              <p className=\"text-sm text-gray-600\">\n                {sleep.endTime ? durationText : 'In progress'} • {time}\n                {sleep.endTime && ` - ${format(new Date(sleep.endTime), \"h:mm a\")}`}\n              </p>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400\">\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        );\n      }\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <section className=\"p-4 bg-white\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-semibold\">Recent Activity</h3>\n        <Button variant=\"ghost\" className=\"text-primary text-sm font-medium\">\n          View All\n        </Button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {activities.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>No activities recorded yet.</p>\n            <p className=\"text-sm\">Start tracking to see your baby's activities here!</p>\n          </div>\n        ) : (\n          activities.map(renderActivityItem)\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5229},"client/src/components/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Home, BarChart3, TrendingUp, Users, Share, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function BottomNavigation() {\n  const [location, navigate] = useLocation();\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Home\" },\n    { path: \"/charts\", icon: BarChart3, label: \"Charts\" },\n    { path: \"/compare\", icon: Users, label: \"Compare\" },\n    { path: \"/growth\", icon: TrendingUp, label: \"Growth\" },\n    { path: \"/profile\", icon: User, label: \"Profile\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 max-w-md mx-auto\">\n      <div className=\"flex\">\n        {navItems.map(({ path, icon: Icon, label }) => (\n          <Button\n            key={path}\n            variant=\"ghost\"\n            className={`flex-1 flex flex-col items-center py-2 px-1 h-auto ${\n              location === path ? \"text-primary\" : \"text-gray-400\"\n            }`}\n            onClick={() => navigate(path)}\n          >\n            <Icon className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">{label}</span>\n          </Button>\n        ))}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1212},"client/src/components/chart-preview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { format, subDays } from \"date-fns\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ChartPreviewProps {\n  babyId: number;\n}\n\nexport default function ChartPreview({ babyId }: ChartPreviewProps) {\n  const today = new Date();\n  const weekStart = subDays(today, 6);\n\n  const { data: weeklyStats } = useQuery({\n    queryKey: [`/api/babies/${babyId}/stats/weekly/${format(weekStart, 'yyyy-MM-dd')}`],\n  });\n\n  const maxFeeds = Math.max(...(weeklyStats?.daily.map(d => d.feedCount) || [1]));\n  const maxSleep = Math.max(...(weeklyStats?.daily.map(d => d.sleepDuration) || [1]));\n\n  const renderBar = (value: number, maxValue: number, color: string, isToday = false) => {\n    const height = Math.max((value / maxValue) * 64, 4);\n    return (\n      <div\n        className={`${color} rounded-t ${isToday ? 'border-2 border-blue-500' : ''}`}\n        style={{ height: `${height}px`, width: '24px' }}\n      />\n    );\n  };\n\n  if (!weeklyStats) {\n    return (\n      <section className=\"p-4 bg-white border-t\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-lg font-semibold\">This Week's Patterns</h3>\n          <Button variant=\"ghost\" className=\"text-primary text-sm font-medium\">\n            View Charts\n          </Button>\n        </div>\n        <div className=\"text-center py-8 text-gray-500\">\n          Loading patterns...\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"p-4 bg-white border-t\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-semibold\">This Week's Patterns</h3>\n        <Button variant=\"ghost\" className=\"text-primary text-sm font-medium\">\n          View Charts\n        </Button>\n      </div>\n      \n      {/* Feeding Pattern Chart Preview */}\n      <div className=\"bg-blue-50 p-4 rounded-xl mb-3\">\n        <h4 className=\"font-medium text-blue-800 mb-2\">Feeding Pattern</h4>\n        <div className=\"flex items-end justify-between space-x-1 h-16\">\n          {weeklyStats.daily.map((day, index) => {\n            const isToday = index === 6;\n            return <div key={`feed-${day.date}`}>{renderBar(day.feedCount, maxFeeds, 'bg-blue-400', isToday)}</div>;\n          })}\n        </div>\n        <div className=\"flex justify-between text-xs text-blue-600 mt-1\">\n          {weeklyStats.daily.map((day) => (\n            <span key={day.date}>\n              {format(new Date(day.date), 'EEE').substring(0, 3)}\n            </span>\n          ))}\n        </div>\n      </div>\n      \n      {/* Sleep Pattern Chart Preview */}\n      <div className=\"bg-purple-50 p-4 rounded-xl\">\n        <h4 className=\"font-medium text-purple-800 mb-2\">Sleep Duration</h4>\n        <div className=\"flex items-end justify-between space-x-1 h-16\">\n          {weeklyStats.daily.map((day, index) => {\n            const isToday = index === 6;\n            const sleepHours = day.sleepDuration / 60;\n            return <div key={`sleep-${day.date}`}>{renderBar(sleepHours, maxSleep / 60, 'bg-purple-400', isToday)}</div>;\n          })}\n        </div>\n        <div className=\"flex justify-between text-xs text-purple-600 mt-1\">\n          {weeklyStats.daily.map((day) => (\n            <span key={day.date}>\n              {format(new Date(day.date), 'EEE').substring(0, 3)}\n            </span>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3423},"client/src/components/quick-entry-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface QuickEntryModalProps {\n  babyId: number;\n  isOpen: boolean;\n  onClose: () => void;\n  defaultTab?: 'feed' | 'nappy' | 'sleep' | 'health';\n}\n\nexport default function QuickEntryModal({ babyId, isOpen, onClose, defaultTab = 'feed' }: QuickEntryModalProps) {\n  const [activeTab, setActiveTab] = useState<'feed' | 'nappy' | 'sleep' | 'health'>(defaultTab);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Feed state\n  const [feedType, setFeedType] = useState<'bottle' | 'breast_left' | 'breast_right' | 'breast_both'>('bottle');\n  const [feedAmount, setFeedAmount] = useState('');\n  const [feedDuration, setFeedDuration] = useState('');\n  const [feedTime, setFeedTime] = useState(format(new Date(), 'HH:mm'));\n\n  // Nappy state\n  const [nappyType, setNappyType] = useState<'wet' | 'soiled' | 'both'>('wet');\n  const [nappyTime, setNappyTime] = useState(format(new Date(), 'HH:mm'));\n\n  // Sleep state\n  const [sleepType, setSleepType] = useState<'start' | 'end'>('start');\n  const [sleepCategory, setSleepCategory] = useState<'nap' | 'night'>('nap');\n  const [sleepStartTime, setSleepStartTime] = useState(format(new Date(), 'HH:mm'));\n  const [sleepEndTime, setSleepEndTime] = useState('');\n\n  // Health state\n  const [healthType, setHealthType] = useState<'temperature' | 'mood' | 'rash' | 'other'>('temperature');\n  const [healthValue, setHealthValue] = useState('');\n  const [healthTime, setHealthTime] = useState(format(new Date(), 'HH:mm'));\n\n  // Update active tab when defaultTab changes\n  useEffect(() => {\n    if (isOpen) {\n      setActiveTab(defaultTab);\n    }\n  }, [defaultTab, isOpen]);\n\n  const createFeedMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', `/api/babies/${babyId}/feeds`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/feeds`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/summary`] });\n      toast({ title: \"Feed recorded successfully!\" });\n      resetForm();\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to record feed\", variant: \"destructive\" });\n    },\n  });\n\n  const createNappyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', `/api/babies/${babyId}/nappies`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/nappies`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/summary`] });\n      toast({ title: \"Nappy change recorded successfully!\" });\n      resetForm();\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to record nappy change\", variant: \"destructive\" });\n    },\n  });\n\n  const createSleepMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', `/api/babies/${babyId}/sleep`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/sleep`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/summary`] });\n      toast({ title: \"Sleep session recorded successfully!\" });\n      resetForm();\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to record sleep session\", variant: \"destructive\" });\n    },\n  });\n\n  const createHealthMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', `/api/babies/${babyId}/health`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/health`] });\n      toast({ title: \"Health record created successfully!\" });\n      resetForm();\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create health record\", variant: \"destructive\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFeedAmount('');\n    setFeedDuration('');\n    setHealthValue('');\n    setSleepEndTime('');\n  };\n\n  const handleSaveFeed = () => {\n    const today = new Date();\n    const [hours, minutes] = feedTime.split(':');\n    const timestamp = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));\n\n    const feedData = {\n      type: feedType,\n      timestamp: timestamp.toISOString(),\n      ...(feedType === 'bottle' ? { amount: feedAmount } : { duration: parseInt(feedDuration) || 0 }),\n    };\n\n    createFeedMutation.mutate(feedData);\n  };\n\n  const handleSaveNappy = () => {\n    const today = new Date();\n    const [hours, minutes] = nappyTime.split(':');\n    const timestamp = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));\n\n    const nappyData = {\n      type: nappyType,\n      timestamp: timestamp.toISOString(),\n    };\n\n    createNappyMutation.mutate(nappyData);\n  };\n\n  const handleSaveSleep = () => {\n    const today = new Date();\n    \n    if (sleepType === 'start') {\n      const [hours, minutes] = sleepStartTime.split(':');\n      const startTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));\n\n      const sleepData = {\n        type: sleepCategory,\n        startTime: startTime.toISOString(),\n      };\n\n      createSleepMutation.mutate(sleepData);\n    } else if (sleepEndTime) {\n      const [startHours, startMinutes] = sleepStartTime.split(':');\n      const [endHours, endMinutes] = sleepEndTime.split(':');\n      \n      const startTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(startHours), parseInt(startMinutes));\n      const endTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(endHours), parseInt(endMinutes));\n      \n      // If end time is before start time, assume it's the next day\n      if (endTime < startTime) {\n        endTime.setDate(endTime.getDate() + 1);\n      }\n\n      const duration = Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60));\n\n      const sleepData = {\n        type: sleepCategory,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        duration,\n      };\n\n      createSleepMutation.mutate(sleepData);\n    }\n  };\n\n  const handleSaveHealth = () => {\n    const today = new Date();\n    const [hours, minutes] = healthTime.split(':');\n    const timestamp = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes));\n\n    const healthData = {\n      type: healthType,\n      value: healthValue,\n      timestamp: timestamp.toISOString(),\n    };\n\n    createHealthMutation.mutate(healthData);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50\" onClick={onClose}>\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl max-w-md mx-auto\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Quick Entry</h3>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex border-b\">\n          <button\n            className={`flex-1 py-3 text-sm font-medium ${activeTab === 'feed' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('feed')}\n          >\n            Feed\n          </button>\n          <button\n            className={`flex-1 py-3 text-sm font-medium ${activeTab === 'nappy' ? 'text-yellow-600 border-b-2 border-yellow-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('nappy')}\n          >\n            Nappy\n          </button>\n          <button\n            className={`flex-1 py-3 text-sm font-medium ${activeTab === 'sleep' ? 'text-purple-600 border-b-2 border-purple-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('sleep')}\n          >\n            Sleep\n          </button>\n          <button\n            className={`flex-1 py-3 text-sm font-medium ${activeTab === 'health' ? 'text-orange-600 border-b-2 border-orange-600' : 'text-gray-500'}`}\n            onClick={() => setActiveTab('health')}\n          >\n            Health\n          </button>\n        </div>\n\n        <div className=\"p-4 space-y-4 max-h-96 overflow-y-auto\">\n          {/* Feed Entry - Simplified 2-tap flow */}\n          {activeTab === 'feed' && (\n            <div className=\"space-y-6\">\n              {/* Quick Method Selection */}\n              <div>\n                <Label className=\"text-base font-medium\">Feed Method</Label>\n                <div className=\"grid grid-cols-2 gap-3 mt-3\">\n                  <Button\n                    variant={feedType === 'bottle' ? 'default' : 'outline'}\n                    size=\"lg\"\n                    onClick={() => setFeedType('bottle')}\n                    className=\"h-16 flex flex-col items-center space-y-1\"\n                  >\n                    <span className=\"text-xl\">🍼</span>\n                    <span>Bottle</span>\n                  </Button>\n                  <Button\n                    variant={feedType.startsWith('breast') ? 'default' : 'outline'}\n                    size=\"lg\"\n                    onClick={() => setFeedType('breast_both')}\n                    className=\"h-16 flex flex-col items-center space-y-1\"\n                  >\n                    <span className=\"text-xl\">🤱</span>\n                    <span>Breast</span>\n                  </Button>\n                </div>\n              </div>\n\n              {/* Preset Values for Quick Selection */}\n              {feedType === 'bottle' ? (\n                <div>\n                  <Label className=\"text-base font-medium\">Amount (ml)</Label>\n                  <div className=\"grid grid-cols-4 gap-2 mt-3\">\n                    {[60, 90, 120, 150].map((amount) => (\n                      <Button\n                        key={amount}\n                        variant={feedAmount === amount.toString() ? 'default' : 'outline'}\n                        size=\"lg\"\n                        onClick={() => setFeedAmount(amount.toString())}\n                        className=\"h-12\"\n                      >\n                        {amount}ml\n                      </Button>\n                    ))}\n                  </div>\n                  <div className=\"mt-2\">\n                    <Input\n                      placeholder=\"Custom amount\"\n                      value={feedAmount}\n                      onChange={(e) => setFeedAmount(e.target.value)}\n                      type=\"number\"\n                      className=\"text-center\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <Label className=\"text-base font-medium\">Duration (minutes)</Label>\n                  <div className=\"grid grid-cols-4 gap-2 mt-3\">\n                    {[10, 15, 20, 25].map((duration) => (\n                      <Button\n                        key={duration}\n                        variant={feedDuration === duration.toString() ? 'default' : 'outline'}\n                        size=\"lg\"\n                        onClick={() => setFeedDuration(duration.toString())}\n                        className=\"h-12\"\n                      >\n                        {duration}min\n                      </Button>\n                    ))}\n                  </div>\n                  <div className=\"mt-2\">\n                    <Input\n                      placeholder=\"Custom duration\"\n                      value={feedDuration}\n                      onChange={(e) => setFeedDuration(e.target.value)}\n                      type=\"number\"\n                      className=\"text-center\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <Button \n                onClick={handleSaveFeed} \n                className=\"w-full bg-blue-500 hover:bg-blue-600 h-12 text-lg font-medium\"\n                disabled={createFeedMutation.isPending}\n              >\n                {createFeedMutation.isPending ? 'Saving...' : 'Log Feed Now'}\n              </Button>\n            </div>\n          )}\n\n          {/* Nappy Entry - One-tap icon system */}\n          {activeTab === 'nappy' && (\n            <div className=\"space-y-6\">\n              <div>\n                <Label className=\"text-base font-medium\">Quick Change Log</Label>\n                <p className=\"text-sm text-gray-600 mt-1\">Tap the type of change</p>\n                <div className=\"grid grid-cols-3 gap-3 mt-4\">\n                  <Button\n                    variant={nappyType === 'wet' ? 'default' : 'outline'}\n                    size=\"lg\"\n                    onClick={() => {\n                      setNappyType('wet');\n                      // Auto-save after selection for ultimate simplicity\n                      setTimeout(() => handleSaveNappy(), 100);\n                    }}\n                    className=\"h-20 flex flex-col items-center space-y-2 touch-manipulation\"\n                  >\n                    <span className=\"text-2xl\">💧</span>\n                    <span className=\"font-medium\">Wet</span>\n                  </Button>\n                  <Button\n                    variant={nappyType === 'soiled' ? 'default' : 'outline'}\n                    size=\"lg\"\n                    onClick={() => {\n                      setNappyType('soiled');\n                      setTimeout(() => handleSaveNappy(), 100);\n                    }}\n                    className=\"h-20 flex flex-col items-center space-y-2 touch-manipulation\"\n                  >\n                    <span className=\"text-2xl\">💩</span>\n                    <span className=\"font-medium\">Soiled</span>\n                  </Button>\n                  <Button\n                    variant={nappyType === 'both' ? 'default' : 'outline'}\n                    size=\"lg\"\n                    onClick={() => {\n                      setNappyType('both');\n                      setTimeout(() => handleSaveNappy(), 100);\n                    }}\n                    className=\"h-20 flex flex-col items-center space-y-2 touch-manipulation\"\n                  >\n                    <span className=\"text-2xl\">💧💩</span>\n                    <span className=\"font-medium\">Both</span>\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"text-center text-sm text-gray-500\">\n                Time will be logged automatically as \"now\"\n              </div>\n\n              {/* Manual save option if needed */}\n              <Button \n                onClick={handleSaveNappy} \n                variant=\"outline\"\n                className=\"w-full\"\n                disabled={createNappyMutation.isPending}\n              >\n                {createNappyMutation.isPending ? 'Saving...' : 'Manual Save'}\n              </Button>\n            </div>\n          )}\n\n          {/* Sleep Entry */}\n          {activeTab === 'sleep' && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Sleep Type</Label>\n                <div className=\"flex space-x-2 mt-1\">\n                  <Button\n                    variant={sleepCategory === 'nap' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSleepCategory('nap')}\n                  >\n                    Nap\n                  </Button>\n                  <Button\n                    variant={sleepCategory === 'night' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSleepCategory('night')}\n                  >\n                    Night\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label>Action</Label>\n                <div className=\"flex space-x-2 mt-1\">\n                  <Button\n                    variant={sleepType === 'start' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSleepType('start')}\n                  >\n                    Start Sleep\n                  </Button>\n                  <Button\n                    variant={sleepType === 'end' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSleepType('end')}\n                  >\n                    End Sleep\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"sleep-start\">Start Time</Label>\n                  <Input\n                    id=\"sleep-start\"\n                    type=\"time\"\n                    value={sleepStartTime}\n                    onChange={(e) => setSleepStartTime(e.target.value)}\n                  />\n                </div>\n\n                {sleepType === 'end' && (\n                  <div>\n                    <Label htmlFor=\"sleep-end\">End Time</Label>\n                    <Input\n                      id=\"sleep-end\"\n                      type=\"time\"\n                      value={sleepEndTime}\n                      onChange={(e) => setSleepEndTime(e.target.value)}\n                    />\n                  </div>\n                )}\n              </div>\n\n              <Button \n                onClick={handleSaveSleep} \n                className=\"w-full bg-purple-500 hover:bg-purple-600\"\n                disabled={createSleepMutation.isPending}\n              >\n                {createSleepMutation.isPending ? 'Saving...' : 'Save Sleep'}\n              </Button>\n            </div>\n          )}\n\n          {/* Health Entry */}\n          {activeTab === 'health' && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Health Type</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-1\">\n                  <Button\n                    variant={healthType === 'temperature' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setHealthType('temperature')}\n                  >\n                    Temperature\n                  </Button>\n                  <Button\n                    variant={healthType === 'mood' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setHealthType('mood')}\n                  >\n                    Mood\n                  </Button>\n                  <Button\n                    variant={healthType === 'rash' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setHealthType('rash')}\n                  >\n                    Rash\n                  </Button>\n                  <Button\n                    variant={healthType === 'other' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setHealthType('other')}\n                  >\n                    Other\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"health-value\">\n                    {healthType === 'temperature' ? 'Temperature (°C)' : 'Description'}\n                  </Label>\n                  <Input\n                    id=\"health-value\"\n                    type={healthType === 'temperature' ? 'number' : 'text'}\n                    placeholder={healthType === 'temperature' ? '36.5' : 'Description'}\n                    value={healthValue}\n                    onChange={(e) => setHealthValue(e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"health-time\">Time</Label>\n                  <Input\n                    id=\"health-time\"\n                    type=\"time\"\n                    value={healthTime}\n                    onChange={(e) => setHealthTime(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <Button \n                onClick={handleSaveHealth} \n                className=\"w-full bg-orange-500 hover:bg-orange-600\"\n                disabled={createHealthMutation.isPending}\n              >\n                {createHealthMutation.isPending ? 'Saving...' : 'Save Health Record'}\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-4\">\n          <Button variant=\"outline\" className=\"w-full\" onClick={onClose}>\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20962},"client/src/components/stats-overview.tsx":{"content":"import { format } from \"date-fns\";\nimport { Utensils, Baby, Moon, Heart } from \"lucide-react\";\n\ninterface StatsOverviewProps {\n  babyId: number;\n  dailySummary?: {\n    feedCount: number;\n    nappyCount: number;\n    sleepDuration: number;\n    lastFeed?: string;\n    lastNappy?: string;\n    currentSleepSession?: any;\n  };\n}\n\nexport default function StatsOverview({ dailySummary }: StatsOverviewProps) {\n  const formatTime = (dateString?: string) => {\n    if (!dateString) return \"N/A\";\n    return format(new Date(dateString), \"h:mm a\");\n  };\n\n  const formatSleepDuration = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${mins}m`;\n    }\n    return `${mins}m`;\n  };\n\n  return (\n    <section className=\"p-4 bg-white\">\n      <h2 className=\"text-lg font-semibold mb-3\">Today's Summary</h2>\n      <div className=\"grid grid-cols-2 gap-3\">\n        <div className=\"bg-blue-50 p-3 rounded-xl shadow-sm\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <Utensils className=\"h-5 w-5 text-blue-600\" />\n            <span className=\"text-sm font-medium text-blue-800\">Feeds</span>\n          </div>\n          <p className=\"text-2xl font-bold text-blue-900\">\n            {dailySummary?.feedCount || 0}\n          </p>\n          <p className=\"text-xs text-blue-600\">\n            Last: {formatTime(dailySummary?.lastFeed)}\n          </p>\n        </div>\n        \n        <div className=\"bg-yellow-50 p-3 rounded-xl shadow-sm\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <Baby className=\"h-5 w-5 text-yellow-600\" />\n            <span className=\"text-sm font-medium text-yellow-800\">Nappies</span>\n          </div>\n          <p className=\"text-2xl font-bold text-yellow-900\">\n            {dailySummary?.nappyCount || 0}\n          </p>\n          <p className=\"text-xs text-yellow-600\">\n            Last: {formatTime(dailySummary?.lastNappy)}\n          </p>\n        </div>\n        \n        <div className=\"bg-purple-50 p-3 rounded-xl shadow-sm\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <Moon className=\"h-5 w-5 text-purple-600\" />\n            <span className=\"text-sm font-medium text-purple-800\">Sleep</span>\n          </div>\n          <p className=\"text-2xl font-bold text-purple-900\">\n            {dailySummary?.sleepDuration ? formatSleepDuration(dailySummary.sleepDuration) : \"0m\"}\n          </p>\n          <p className=\"text-xs text-purple-600\">\n            Currently: {dailySummary?.currentSleepSession ? \"Sleeping\" : \"Awake\"}\n          </p>\n        </div>\n        \n        <div className=\"bg-green-50 p-3 rounded-xl shadow-sm\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <Heart className=\"h-5 w-5 text-green-600\" />\n            <span className=\"text-sm font-medium text-green-800\">Mood</span>\n          </div>\n          <p className=\"text-2xl font-bold text-green-900\">😊</p>\n          <p className=\"text-xs text-green-600\">Happy & Alert</p>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3091},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/charts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { format, subDays } from \"date-fns\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useLocation } from \"wouter\";\n\nexport default function Charts() {\n  const [, navigate] = useLocation();\n  const babyId = 1; // Demo baby ID\n  const today = new Date();\n  const weekStart = subDays(today, 6);\n\n  const { data: weeklyStats } = useQuery({\n    queryKey: [`/api/babies/${babyId}/stats/weekly/${format(weekStart, 'yyyy-MM-dd')}`],\n  });\n\n  const renderDetailedChart = (data: any[], dataKey: string, color: string, title: string, unit: string) => {\n    if (!data || data.length === 0) return null;\n\n    const maxValue = Math.max(...data.map(d => d[dataKey]));\n\n    return (\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">{title}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-end justify-between space-x-2 h-32 mb-4\">\n            {data.map((day, index) => {\n              const height = maxValue > 0 ? (day[dataKey] / maxValue) * 120 : 4;\n              return (\n                <div key={day.date} className=\"flex flex-col items-center flex-1\">\n                  <div className=\"flex flex-col justify-end h-32\">\n                    <div\n                      className={`${color} rounded-t mx-auto`}\n                      style={{ height: `${Math.max(height, 4)}px`, width: '24px' }}\n                    />\n                  </div>\n                  <span className=\"text-xs mt-2 text-gray-600\">\n                    {format(new Date(day.date), 'EEE')}\n                  </span>\n                  <span className=\"text-xs font-medium\">\n                    {dataKey === 'sleepDuration' ? `${Math.round(day[dataKey] / 60)}h` : `${day[dataKey]}${unit}`}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-sm text-gray-600\">\n            <p>Average: {\n              dataKey === 'sleepDuration' \n                ? `${Math.round((data.reduce((sum, d) => sum + d[dataKey], 0) / data.length) / 60)}h` \n                : `${Math.round(data.reduce((sum, d) => sum + d[dataKey], 0) / data.length)}${unit}`\n            }</p>\n            <p>Total this week: {\n              dataKey === 'sleepDuration' \n                ? `${Math.round(data.reduce((sum, d) => sum + d[dataKey], 0) / 60)}h` \n                : `${data.reduce((sum, d) => sum + d[dataKey], 0)}${unit}`\n            }</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen pb-20\">\n      {/* Header */}\n      <header className=\"bg-primary text-white p-4 flex items-center\">\n        <Button variant=\"ghost\" size=\"icon\" className=\"text-white mr-3\" onClick={() => navigate(\"/\")}>\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Charts & Analytics</h1>\n      </header>\n\n      <div className=\"p-4\">\n        <h2 className=\"text-xl font-semibold mb-4\">This Week's Patterns</h2>\n        \n        {weeklyStats ? (\n          <>\n            {renderDetailedChart(weeklyStats.daily, 'feedCount', 'bg-blue-500', 'Daily Feeds', '')}\n            {renderDetailedChart(weeklyStats.daily, 'nappyCount', 'bg-yellow-500', 'Daily Nappies', '')}\n            {renderDetailedChart(weeklyStats.daily, 'sleepDuration', 'bg-purple-500', 'Daily Sleep', '')}\n          </>\n        ) : (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>Loading charts...</p>\n          </div>\n        )}\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":3857},"client/src/pages/compare.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Star, Users, Globe, Lock, Crown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useLocation } from \"wouter\";\n\nexport default function Compare() {\n  const [isPremium, setIsPremium] = useState(false);\n  const [peerDataConsent, setPeerDataConsent] = useState(false);\n  const [, navigate] = useLocation();\n  const babyId = 1;\n\n  const { data: baby } = useQuery({\n    queryKey: [`/api/babies/${babyId}`],\n  });\n\n  const { data: growthRecords } = useQuery({\n    queryKey: [`/api/babies/${babyId}/growth`],\n  });\n\n  const calculateAge = (birthDate: string) => {\n    const birth = new Date(birthDate);\n    const now = new Date();\n    const ageInMonths = Math.floor((now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24 * 30.44));\n    return ageInMonths;\n  };\n\n  const getWHOPercentile = (weight: number, ageInMonths: number, gender: string) => {\n    // Simplified WHO percentile calculation (in real app, use WHO tables)\n    const baseWeight = gender === 'female' ? 3.2 : 3.4; // Birth weight\n    const expectedWeight = baseWeight + (ageInMonths * 0.6); // Approximate growth\n    const ratio = weight / expectedWeight;\n    \n    if (ratio > 1.15) return \"90th percentile\";\n    if (ratio > 1.05) return \"75th percentile\";\n    if (ratio > 0.95) return \"50th percentile\";\n    if (ratio > 0.85) return \"25th percentile\";\n    return \"10th percentile\";\n  };\n\n  const ageInMonths = baby?.birthDate ? calculateAge(baby.birthDate) : 0;\n  const latestWeight = growthRecords?.[0]?.weight ? parseFloat(growthRecords[0].weight) : 0;\n\n  return (\n    <div className=\"max-w-md mx-auto bg-background min-h-screen relative pb-20\">\n      {/* Header */}\n      <header className=\"bg-primary text-primary-foreground p-4 flex items-center justify-between sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-primary-foreground hover:bg-primary-foreground/20\" onClick={() => navigate(\"/\")}>\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-lg font-semibold\">Data Comparison</h1>\n        </div>\n        <Badge variant=\"secondary\" className=\"bg-primary-foreground/20 text-primary-foreground\">\n          {isPremium ? 'Premium' : 'Free'}\n        </Badge>\n      </header>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Subscription Status */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold flex items-center space-x-2\">\n                  {isPremium ? <Crown className=\"h-4 w-4 text-yellow-500\" /> : <Star className=\"h-4 w-4\" />}\n                  <span>{isPremium ? 'Premium Features' : 'Free Features'}</span>\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {isPremium ? 'Access peer comparisons and community insights' : 'Compare with WHO standards'}\n                </p>\n              </div>\n              {!isPremium && (\n                <Button size=\"sm\" className=\"bg-gradient-to-r from-blue-500 to-purple-600\">\n                  Upgrade\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"growth\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"growth\">Growth</TabsTrigger>\n            <TabsTrigger value=\"feeding\">Feeding</TabsTrigger>\n            <TabsTrigger value=\"sleep\">Sleep</TabsTrigger>\n          </TabsList>\n\n          {/* Growth Comparisons */}\n          <TabsContent value=\"growth\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Growth Tracking</span>\n                  <Badge variant=\"outline\">WHO Standards</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {latestWeight > 0 ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Current Weight</span>\n                      <span className=\"text-lg font-bold\">{latestWeight}kg</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">WHO Percentile</span>\n                      <Badge variant=\"secondary\">\n                        {getWHOPercentile(latestWeight, ageInMonths, baby?.gender || 'female')}\n                      </Badge>\n                    </div>\n                    <div className=\"bg-muted p-3 rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Source:</strong> WHO Child Growth Standards 2006\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Your baby's weight is within normal range for {ageInMonths}-month-olds\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted-foreground\">\n                    <p>Add growth measurements to see WHO comparisons</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Premium Peer Comparison */}\n            {isPremium && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Community Insights</span>\n                    <Badge className=\"bg-gradient-to-r from-blue-500 to-purple-600\">Premium</Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {peerDataConsent ? (\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium\">Regional Average</span>\n                        <span className=\"text-sm\">{(latestWeight * 1.02).toFixed(1)}kg</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium\">Your Position</span>\n                        <Badge variant=\"secondary\">15% above average</Badge>\n                      </div>\n                      <div className=\"bg-muted p-3 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          Based on {Math.floor(Math.random() * 1000 + 500)} babies in your region\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <Alert>\n                      <Users className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        <div className=\"space-y-3\">\n                          <p className=\"text-sm\">\n                            Enable community comparisons to see how your baby's growth compares with other TinyTracks users.\n                          </p>\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch \n                              checked={peerDataConsent} \n                              onCheckedChange={setPeerDataConsent}\n                            />\n                            <span className=\"text-sm\">Share anonymous data</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Your data will be anonymized and used to generate community insights. You can opt out anytime.\n                          </p>\n                        </div>\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Feeding Comparisons */}\n          <TabsContent value=\"feeding\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Feeding Patterns</span>\n                  <Badge variant=\"outline\">NHS Guidelines</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Daily Feeds</span>\n                    <span className=\"text-sm\">8-12 feeds</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Your Average</span>\n                    <Badge variant=\"secondary\">9 feeds/day</Badge>\n                  </div>\n                  <div className=\"bg-muted p-3 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>Source:</strong> NHS Feeding Guidelines\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Your feeding frequency is within recommended range\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {isPremium && peerDataConsent && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Community Comparison</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Most {ageInMonths}-month-olds in your region feed 7-10 times daily\n                    </p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Your Position</span>\n                      <Badge variant=\"secondary\">Within typical range</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Sleep Comparisons */}\n          <TabsContent value=\"sleep\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Sleep Patterns</span>\n                  <Badge variant=\"outline\">Pediatric Standards</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Recommended Sleep</span>\n                    <span className=\"text-sm\">14-17 hours/day</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Your Average</span>\n                    <Badge variant=\"secondary\">15.5 hours/day</Badge>\n                  </div>\n                  <div className=\"bg-muted p-3 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>Source:</strong> American Academy of Pediatrics\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Your baby's sleep duration is healthy and appropriate\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Upgrade CTA for free users */}\n        {!isPremium && (\n          <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center space-y-3\">\n                <Crown className=\"h-8 w-8 text-yellow-500 mx-auto\" />\n                <h3 className=\"font-semibold\">Unlock Community Insights</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Compare with other parents in your area and get personalized insights\n                </p>\n                <Button className=\"bg-gradient-to-r from-blue-500 to-purple-600\">\n                  Upgrade to Premium\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":13198},"client/src/pages/export.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, subDays, addDays } from \"date-fns\";\nimport { ArrowLeft, Download, Share2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Feed, Nappy, SleepSession, HealthRecord } from \"@shared/schema\";\n\nexport default function Export() {\n  const [, navigate] = useLocation();\n  const [startDate, setStartDate] = useState(format(subDays(new Date(), 7), 'yyyy-MM-dd'));\n  const [endDate, setEndDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n  const [includeFeeds, setIncludeFeeds] = useState(true);\n  const [includeNappies, setIncludeNappies] = useState(true);\n  const [includeSleep, setIncludeSleep] = useState(true);\n  const [includeHealth, setIncludeHealth] = useState(true);\n  \n  const { toast } = useToast();\n  const babyId = 1; // Demo baby ID\n\n  const { data: baby } = useQuery({\n    queryKey: [`/api/babies/${babyId}`],\n  });\n\n  const { data: feeds = [] } = useQuery<Feed[]>({\n    queryKey: [`/api/babies/${babyId}/feeds`],\n    enabled: includeFeeds,\n  });\n\n  const { data: nappies = [] } = useQuery<Nappy[]>({\n    queryKey: [`/api/babies/${babyId}/nappies`],\n    enabled: includeNappies,\n  });\n\n  const { data: sleepSessions = [] } = useQuery<SleepSession[]>({\n    queryKey: [`/api/babies/${babyId}/sleep`],\n    enabled: includeSleep,\n  });\n\n  const { data: healthRecords = [] } = useQuery<HealthRecord[]>({\n    queryKey: [`/api/babies/${babyId}/health`],\n    enabled: includeHealth,\n  });\n\n  const filterDataByDateRange = (data: any[], dateField: string) => {\n    const start = new Date(startDate);\n    const end = addDays(new Date(endDate), 1); // Include the end date\n    \n    return data.filter(item => {\n      const itemDate = new Date(item[dateField]);\n      return itemDate >= start && itemDate < end;\n    });\n  };\n\n  const generateReportData = () => {\n    const filteredFeeds = filterDataByDateRange(feeds, 'timestamp');\n    const filteredNappies = filterDataByDateRange(nappies, 'timestamp');\n    const filteredSleep = filterDataByDateRange(sleepSessions, 'startTime');\n    const filteredHealth = filterDataByDateRange(healthRecords, 'timestamp');\n\n    return {\n      baby: baby?.name || 'Baby',\n      dateRange: `${format(new Date(startDate), 'MMM dd, yyyy')} - ${format(new Date(endDate), 'MMM dd, yyyy')}`,\n      feeds: filteredFeeds,\n      nappies: filteredNappies,\n      sleepSessions: filteredSleep,\n      healthRecords: filteredHealth,\n      summary: {\n        totalFeeds: filteredFeeds.length,\n        totalNappies: filteredNappies.length,\n        totalSleepTime: filteredSleep.reduce((total, session) => total + (session.duration || 0), 0),\n        averageFeedsPerDay: Math.round(filteredFeeds.length / Math.max(1, Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (1000 * 60 * 60 * 24)))),\n      }\n    };\n  };\n\n  const exportAsJSON = () => {\n    const data = generateReportData();\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `baby-wellness-report-${startDate}-to-${endDate}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({ title: \"Report exported successfully!\" });\n  };\n\n  const exportAsCSV = () => {\n    const data = generateReportData();\n    let csvContent = \"Type,Date,Time,Details\\n\";\n    \n    if (includeFeeds) {\n      data.feeds.forEach(feed => {\n        const date = format(new Date(feed.timestamp), 'yyyy-MM-dd');\n        const time = format(new Date(feed.timestamp), 'HH:mm');\n        const details = feed.type === 'bottle' ? `${feed.amount}ml bottle` : `${feed.duration}min ${feed.type}`;\n        csvContent += `Feed,${date},${time},\"${details}\"\\n`;\n      });\n    }\n    \n    if (includeNappies) {\n      data.nappies.forEach(nappy => {\n        const date = format(new Date(nappy.timestamp), 'yyyy-MM-dd');\n        const time = format(new Date(nappy.timestamp), 'HH:mm');\n        csvContent += `Nappy,${date},${time},\"${nappy.type}\"\\n`;\n      });\n    }\n    \n    if (includeSleep) {\n      data.sleepSessions.forEach(sleep => {\n        const date = format(new Date(sleep.startTime), 'yyyy-MM-dd');\n        const time = format(new Date(sleep.startTime), 'HH:mm');\n        const duration = sleep.duration ? `${Math.round(sleep.duration)}min` : 'ongoing';\n        csvContent += `Sleep,${date},${time},\"${sleep.type} - ${duration}\"\\n`;\n      });\n    }\n    \n    if (includeHealth) {\n      data.healthRecords.forEach(health => {\n        const date = format(new Date(health.timestamp), 'yyyy-MM-dd');\n        const time = format(new Date(health.timestamp), 'HH:mm');\n        csvContent += `Health,${date},${time},\"${health.type}: ${health.value || 'N/A'}\"\\n`;\n      });\n    }\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `baby-wellness-report-${startDate}-to-${endDate}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({ title: \"CSV report exported successfully!\" });\n  };\n\n  const shareReport = async () => {\n    const data = generateReportData();\n    const reportText = `\nBaby Wellness Report - ${data.baby}\n${data.dateRange}\n\nSummary:\n• Total Feeds: ${data.summary.totalFeeds}\n• Total Nappies: ${data.summary.totalNappies}\n• Total Sleep: ${Math.round(data.summary.totalSleepTime / 60)}h ${data.summary.totalSleepTime % 60}m\n• Average feeds per day: ${data.summary.averageFeedsPerDay}\n\nGenerated by Baby Wellness Tracker\n    `.trim();\n\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: `Baby Wellness Report - ${data.baby}`,\n          text: reportText,\n        });\n        toast({ title: \"Report shared successfully!\" });\n      } catch (error) {\n        // User cancelled sharing\n      }\n    } else {\n      // Fallback: copy to clipboard\n      navigator.clipboard.writeText(reportText).then(() => {\n        toast({ title: \"Report copied to clipboard!\" });\n      });\n    }\n  };\n\n  const reportData = generateReportData();\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen pb-20\">\n      {/* Header */}\n      <header className=\"bg-primary text-white p-4 flex items-center\">\n        <Button variant=\"ghost\" size=\"icon\" className=\"text-white mr-3\" onClick={() => navigate(\"/\")}>\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-lg font-semibold\">Export Data</h1>\n      </header>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Date Range Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Select Date Range</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"start-date\">Start Date</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"end-date\">End Date</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Select Data to Include</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"feeds\"\n                checked={includeFeeds}\n                onCheckedChange={setIncludeFeeds}\n              />\n              <Label htmlFor=\"feeds\">Feeding records</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"nappies\"\n                checked={includeNappies}\n                onCheckedChange={setIncludeNappies}\n              />\n              <Label htmlFor=\"nappies\">Nappy changes</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"sleep\"\n                checked={includeSleep}\n                onCheckedChange={setIncludeSleep}\n              />\n              <Label htmlFor=\"sleep\">Sleep sessions</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"health\"\n                checked={includeHealth}\n                onCheckedChange={setIncludeHealth}\n              />\n              <Label htmlFor=\"health\">Health records</Label>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Report Preview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Report Summary</CardTitle>\n            <p className=\"text-sm text-gray-600\">{reportData.dateRange}</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p className=\"text-gray-600\">Total Feeds</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{reportData.summary.totalFeeds}</p>\n              </div>\n              <div>\n                <p className=\"text-gray-600\">Total Nappies</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{reportData.summary.totalNappies}</p>\n              </div>\n              <div>\n                <p className=\"text-gray-600\">Total Sleep</p>\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {Math.round(reportData.summary.totalSleepTime / 60)}h\n                </p>\n              </div>\n              <div>\n                <p className=\"text-gray-600\">Avg Feeds/Day</p>\n                <p className=\"text-2xl font-bold text-green-600\">{reportData.summary.averageFeedsPerDay}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Export Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Export Options</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button onClick={exportAsJSON} className=\"w-full\" variant=\"outline\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export as JSON\n            </Button>\n            <Button onClick={exportAsCSV} className=\"w-full\" variant=\"outline\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export as CSV\n            </Button>\n            <Button onClick={shareReport} className=\"w-full\">\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Share Report\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":11587},"client/src/pages/growth.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { ArrowLeft, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { GrowthRecord } from \"@shared/schema\";\n\nexport default function Growth() {\n  const [, navigate] = useLocation();\n  const [isAddingRecord, setIsAddingRecord] = useState(false);\n  const [weight, setWeight] = useState('');\n  const [height, setHeight] = useState('');\n  const [headCircumference, setHeadCircumference] = useState('');\n  const [recordDate, setRecordDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const babyId = 1; // Demo baby ID\n\n  const { data: growthRecords = [] } = useQuery<GrowthRecord[]>({\n    queryKey: [`/api/babies/${babyId}/growth`],\n  });\n\n  const createGrowthMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', `/api/babies/${babyId}/growth`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}/growth`] });\n      toast({ title: \"Growth record added successfully!\" });\n      setIsAddingRecord(false);\n      setWeight('');\n      setHeight('');\n      setHeadCircumference('');\n    },\n    onError: () => {\n      toast({ title: \"Failed to add growth record\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSaveRecord = () => {\n    const recordDateTime = new Date(recordDate);\n    recordDateTime.setHours(12, 0, 0, 0); // Set to noon to avoid timezone issues\n\n    const growthData = {\n      weight: weight ? parseFloat(weight) : null,\n      height: height ? parseFloat(height) : null,\n      headCircumference: headCircumference ? parseFloat(headCircumference) : null,\n      timestamp: recordDateTime.toISOString(),\n    };\n\n    createGrowthMutation.mutate(growthData);\n  };\n\n  const formatMeasurement = (value: any, unit: string) => {\n    if (!value) return 'Not recorded';\n    return `${parseFloat(value).toFixed(1)} ${unit}`;\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen pb-20\">\n      {/* Header */}\n      <header className=\"bg-primary text-white p-4 flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white mr-3\" onClick={() => navigate(\"/\")}>\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-lg font-semibold\">Growth Tracking</h1>\n        </div>\n        \n        <Dialog open={isAddingRecord} onOpenChange={setIsAddingRecord}>\n          <DialogTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n              <Plus className=\"h-5 w-5\" />\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-sm\">\n            <DialogHeader>\n              <DialogTitle>Add Growth Record</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"record-date\">Date</Label>\n                <Input\n                  id=\"record-date\"\n                  type=\"date\"\n                  value={recordDate}\n                  onChange={(e) => setRecordDate(e.target.value)}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"weight\">Weight (kg)</Label>\n                <Input\n                  id=\"weight\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"4.2\"\n                  value={weight}\n                  onChange={(e) => setWeight(e.target.value)}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"height\">Height (cm)</Label>\n                <Input\n                  id=\"height\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"52.5\"\n                  value={height}\n                  onChange={(e) => setHeight(e.target.value)}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"head\">Head Circumference (cm)</Label>\n                <Input\n                  id=\"head\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"36.2\"\n                  value={headCircumference}\n                  onChange={(e) => setHeadCircumference(e.target.value)}\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleSaveRecord} \n                  className=\"flex-1\"\n                  disabled={createGrowthMutation.isPending}\n                >\n                  {createGrowthMutation.isPending ? 'Saving...' : 'Save Record'}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsAddingRecord(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </header>\n\n      <div className=\"p-4\">\n        {/* Current Stats */}\n        {growthRecords.length > 0 && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Latest Measurements</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                {format(new Date(growthRecords[0].timestamp), 'MMM dd, yyyy')}\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {formatMeasurement(growthRecords[0].weight, 'kg')}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Weight</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {formatMeasurement(growthRecords[0].height, 'cm')}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Height</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-purple-600\">\n                    {formatMeasurement(growthRecords[0].headCircumference, 'cm')}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Head</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Growth History */}\n        <div>\n          <h2 className=\"text-lg font-semibold mb-3\">Growth History</h2>\n          \n          {growthRecords.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <p className=\"text-gray-500 mb-4\">No growth records yet.</p>\n                <Button onClick={() => setIsAddingRecord(true)}>\n                  Add First Record\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-3\">\n              {growthRecords.map((record) => (\n                <Card key={record.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <p className=\"font-medium\">\n                        {format(new Date(record.timestamp), 'MMM dd, yyyy')}\n                      </p>\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Weight</p>\n                        <p className=\"font-medium\">\n                          {formatMeasurement(record.weight, 'kg')}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Height</p>\n                        <p className=\"font-medium\">\n                          {formatMeasurement(record.height, 'cm')}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Head</p>\n                        <p className=\"font-medium\">\n                          {formatMeasurement(record.headCircumference, 'cm')}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}\n","size_bytes":9130},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Baby, Menu, Users, Settings, Share2, HelpCircle, Crown } from \"lucide-react\";\nimport StatsOverview from \"@/components/stats-overview\";\nimport ActivityFeed from \"@/components/activity-feed\";\nimport ChartPreview from \"@/components/chart-preview\";\nimport QuickEntryModal from \"@/components/quick-entry-modal\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const [showQuickEntry, setShowQuickEntry] = useState(false);\n  const [quickActionType, setQuickActionType] = useState<'feed' | 'nappy' | 'sleep' | 'health'>('feed');\n  const [, navigate] = useLocation();\n  \n  // For demo purposes, using baby ID 1 - in a real app this would come from user context\n  const babyId = 1;\n  const today = new Date();\n\n  const { data: baby } = useQuery({\n    queryKey: [`/api/babies/${babyId}`],\n  });\n\n  const { data: dailySummary } = useQuery({\n    queryKey: [`/api/babies/${babyId}/summary/${format(today, 'yyyy-MM-dd')}`],\n  });\n\n  const calculateAge = (birthDate: string) => {\n    const birth = new Date(birthDate);\n    const now = new Date();\n    const ageInMonths = Math.floor((now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24 * 30.44));\n    const months = ageInMonths % 12;\n    const years = Math.floor(ageInMonths / 12);\n    \n    if (years > 0) {\n      return `${years} year${years > 1 ? 's' : ''}, ${months} month${months !== 1 ? 's' : ''}`;\n    }\n    return `${ageInMonths} month${ageInMonths !== 1 ? 's' : ''}`;\n  };\n\n  const handleQuickAction = (type: 'feed' | 'nappy' | 'sleep' | 'health') => {\n    setQuickActionType(type);\n    setShowQuickEntry(true);\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto bg-gray-50 min-h-screen relative pb-20\">\n      {/* Header */}\n      <header className=\"bg-primary text-white p-4 flex items-center justify-between sticky top-0 z-10\">\n        <div className=\"flex items-center space-x-3\">\n          <Baby className=\"h-6 w-6\" />\n          <div>\n            <h1 className=\"text-lg font-semibold\">\n              {baby?.name || 'Loading...'}'s Tracker\n            </h1>\n            <p className=\"text-sm opacity-90\">\n              {baby?.birthDate ? calculateAge(baby.birthDate) : 'Loading...'}\n            </p>\n          </div>\n        </div>\n        <Sheet>\n          <SheetTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/20\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"w-80\">\n            <SheetHeader>\n              <SheetTitle>TinyTracks Menu</SheetTitle>\n            </SheetHeader>\n            <div className=\"mt-6 space-y-3\">\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start space-x-3 h-12\"\n                onClick={() => navigate('/compare')}\n              >\n                <Users className=\"h-5 w-5\" />\n                <span>Data Comparison</span>\n              </Button>\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start space-x-3 h-12\"\n                onClick={() => navigate('/profile')}\n              >\n                <Settings className=\"h-5 w-5\" />\n                <span>Settings & Profile</span>\n              </Button>\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start space-x-3 h-12\"\n                onClick={() => navigate('/export')}\n              >\n                <Share2 className=\"h-5 w-5\" />\n                <span>Data Export</span>\n              </Button>\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start space-x-3 h-12 bg-gradient-to-r from-blue-50 to-purple-50 text-blue-700\"\n              >\n                <Crown className=\"h-5 w-5\" />\n                <span>Premium Upgrade</span>\n              </Button>\n              <Button \n                variant=\"ghost\" \n                className=\"w-full justify-start space-x-3 h-12\"\n              >\n                <HelpCircle className=\"h-5 w-5\" />\n                <span>Help / FAQ</span>\n              </Button>\n            </div>\n          </SheetContent>\n        </Sheet>\n      </header>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Primary Action Tiles - Always Visible at Top */}\n        <div className=\"space-y-4\">\n          {/* Feed Tile - Full Width */}\n          <button\n            onClick={() => handleQuickAction('feed')}\n            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white rounded-2xl p-8 flex flex-col items-center justify-center space-y-4 shadow-lg active:scale-95 transition-all duration-200 min-h-[140px] touch-manipulation\"\n          >\n            <div className=\"text-4xl\">🍼</div>\n            <span className=\"font-bold text-xl\">Feed Baby</span>\n            <span className=\"text-sm opacity-90\">Two taps to log feeding</span>\n          </button>\n\n          {/* Change Tile - Full Width */}\n          <button\n            onClick={() => handleQuickAction('nappy')}\n            className=\"w-full bg-green-500 hover:bg-green-600 text-white rounded-2xl p-8 flex flex-col items-center justify-center space-y-4 shadow-lg active:scale-95 transition-all duration-200 min-h-[140px] touch-manipulation\"\n          >\n            <div className=\"text-4xl\">🧷</div>\n            <span className=\"font-bold text-xl\">Change Diaper</span>\n            <span className=\"text-sm opacity-90\">One tap to log change</span>\n          </button>\n        </div>\n\n        {/* Secondary Actions - Scrollable Below Primary */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <button\n            onClick={() => handleQuickAction('sleep')}\n            className=\"bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-xl p-4 flex flex-col items-center space-y-2 touch-manipulation\"\n          >\n            <div className=\"text-2xl\">😴</div>\n            <span className=\"font-medium text-sm\">Sleep</span>\n          </button>\n          \n          <button\n            onClick={() => handleQuickAction('health')}\n            className=\"bg-red-100 hover:bg-red-200 text-red-700 rounded-xl p-4 flex flex-col items-center space-y-2 touch-manipulation\"\n          >\n            <div className=\"text-2xl\">🌡️</div>\n            <span className=\"font-medium text-sm\">Health</span>\n          </button>\n          \n          <button\n            className=\"bg-orange-100 hover:bg-orange-200 text-orange-700 rounded-xl p-4 flex flex-col items-center space-y-2 touch-manipulation\"\n          >\n            <div className=\"text-2xl\">📏</div>\n            <span className=\"font-medium text-sm\">Growth</span>\n          </button>\n        </div>\n        \n        {/* Daily Summary */}\n        <StatsOverview babyId={babyId} dailySummary={dailySummary} />\n        \n        {/* Chart Preview */}\n        <ChartPreview babyId={babyId} />\n        \n        {/* Activity Feed */}\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n          <ActivityFeed babyId={babyId} />\n        </div>\n      </div>\n\n      {/* Bottom Navigation */}\n      <BottomNavigation />\n\n      {/* Quick Entry Modal */}\n      <QuickEntryModal \n        babyId={babyId} \n        isOpen={showQuickEntry} \n        onClose={() => setShowQuickEntry(false)}\n        defaultTab={quickActionType}\n      />\n    </div>\n  );\n}","size_bytes":7670},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Edit, Baby as BabyIcon, Settings, Share2, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport type { Baby } from \"@shared/schema\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\nimport { useLocation } from \"wouter\";\n\nexport default function Profile() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [babyName, setBabyName] = useState(\"\");\n  const [babyBirthDate, setBabyBirthDate] = useState(\"\");\n  const [babyGender, setBabyGender] = useState(\"\");\n  const [notifications, setNotifications] = useState(true);\n  const [shareData, setShareData] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const babyId = 1; // Demo baby ID\n\n  const { data: baby, isLoading } = useQuery<Baby>({\n    queryKey: [`/api/babies/${babyId}`],\n  });\n\n  // Update form fields when baby data loads\n  useEffect(() => {\n    if (baby) {\n      setBabyName(baby.name || '');\n      if (baby.birthDate) {\n        try {\n          const date = new Date(baby.birthDate);\n          if (!isNaN(date.getTime())) {\n            setBabyBirthDate(format(date, 'yyyy-MM-dd'));\n          } else {\n            setBabyBirthDate('2024-01-15');\n          }\n        } catch (error) {\n          setBabyBirthDate('2024-01-15');\n        }\n      }\n      setBabyGender(baby.gender || '');\n    }\n  }, [baby]);\n\n  const updateBabyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('PUT', `/api/babies/${babyId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/babies/${babyId}`] });\n      toast({ title: \"Baby profile updated successfully!\" });\n      setIsEditing(false);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update profile\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSave = () => {\n    if (!babyName.trim()) {\n      toast({ title: \"Please enter a name\", variant: \"destructive\" });\n      return;\n    }\n\n    updateBabyMutation.mutate({\n      name: babyName,\n      birthDate: babyBirthDate,\n      gender: babyGender || null,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4\">\n        <div className=\"animate-pulse\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-2\" onClick={() => navigate(\"/\")}>\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n            <h1 className=\"text-lg font-semibold text-gray-900\">Profile</h1>\n          </div>\n          <Button \n            variant={isEditing ? \"default\" : \"ghost\"} \n            size=\"sm\"\n            onClick={isEditing ? handleSave : () => setIsEditing(true)}\n            disabled={updateBabyMutation.isPending}\n          >\n            {isEditing ? \"Save\" : <Edit className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Baby Information */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BabyIcon className=\"h-5 w-5 text-pink-500\" />\n              <span>Baby Information</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                value={babyName}\n                onChange={(e) => setBabyName(e.target.value)}\n                disabled={!isEditing}\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"birthDate\">Birth Date</Label>\n              <Input\n                id=\"birthDate\"\n                type=\"date\"\n                value={babyBirthDate}\n                onChange={(e) => setBabyBirthDate(e.target.value)}\n                disabled={!isEditing}\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label>Gender</Label>\n              <Select \n                value={babyGender} \n                onValueChange={setBabyGender}\n                disabled={!isEditing}\n              >\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select gender\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"male\">Male</SelectItem>\n                  <SelectItem value=\"female\">Female</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* App Settings */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Settings className=\"h-5 w-5 text-gray-600\" />\n              <span>App Settings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Notifications</Label>\n                <p className=\"text-xs text-gray-600\">Get reminders for feeding and diaper changes</p>\n              </div>\n              <Switch \n                checked={notifications} \n                onCheckedChange={setNotifications}\n              />\n            </div>\n            <Separator />\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label className=\"text-sm font-medium\">Share Data</Label>\n                <p className=\"text-xs text-gray-600\">Allow caregivers to access data</p>\n              </div>\n              <Switch \n                checked={shareData} \n                onCheckedChange={setShareData}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data & Privacy */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Share2 className=\"h-5 w-5 text-blue-500\" />\n              <span>Data & Privacy</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              Export Data\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              Manage Caregivers\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start text-red-600 hover:text-red-700\">\n              Delete Account\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* App Info */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-2\">\n              <h3 className=\"font-medium text-gray-900\">Baby Wellness Tracker</h3>\n              <p className=\"text-sm text-gray-600\">Version 1.0.0</p>\n              <div className=\"flex justify-center space-x-2\">\n                <Badge variant=\"secondary\">Privacy First</Badge>\n                <Badge variant=\"secondary\">Family-Friendly</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":8316},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}